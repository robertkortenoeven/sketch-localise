var onStartup = function(context) {
    log("Started up app store export plugin");
}

var onOpenDocument = function(context) {
    log("onOpenDocument");
}

var onSelectionChanged = function(context) {
    log("selection changed");
}

var testJsLocalizer = function() {
    log("Localizer: elaborate test to see if calling Javascript from Objective-c works");
}

// find pages and layers
var findPagesNamed = function(pageName) {
    var predicate = NSPredicate.predicateWithFormat("name == %@", pageName)
    return findLayersMatchingPredicate_inContainer_filterByType(predicate, nil, MSPage)
}

var findLayersMatchingPredicate_inContainer_filterByType = function(predicate, container, layerType) {
    var scope;
    switch (layerType) {
        case MSPage :
            scope = doc.pages()
            return scope.filteredArrayUsingPredicate(predicate)
            break;
            
        case MSArtboardGroup :
            if(typeof container !== 'undefined' && container != nil) {
                if (container.className == "MSPage") {
                    scope = container.artboards()
                    return scope.filteredArrayUsingPredicate(predicate)
                }
            } else {
                // search all pages
                var filteredArray = NSArray.array()
                var loopPages = doc.pages().objectEnumerator(), page;
                while (page = loopPages.nextObject()) {
                    scope = page.artboards()
                    filteredArray = filteredArray.arrayByAddingObjectsFromArray(scope.filteredArrayUsingPredicate(predicate))
                }
                return filteredArray
            }
            break;
            
        default :
            if(typeof container !== 'undefined' && container != nil) {
                scope = container.children()
                return scope.filteredArrayUsingPredicate(predicate)
            } else {
                // search all pages
                var filteredArray = NSArray.array()
                var loopPages = doc.pages().objectEnumerator(), page;
                while (page = loopPages.nextObject()) {
                    scope = page.children()
                    filteredArray = filteredArray.arrayByAddingObjectsFromArray(scope.filteredArrayUsingPredicate(predicate))
                }
                return filteredArray
            }
    }
    return NSArray.array() // Return an empty array if no matches were found
}

var findFirstLayerMatchingPredicate_inContainer_filterByType = function(predicate, container, layerType) {
    var filteredArray = findLayersMatchingPredicate_inContainer_filterByType(predicate, container, layerType)
    return filteredArray.firstObject()
}


var localiseIOS = function (context) {
    var doc = context.document
    
    
    
    // ------------------------------------
    //var predicate = NSPredicate.predicateWithFormat("name != %@", "")
    //var layers = findFirstLayerMatchingPredicate_inContainer_filterByType(predicate, doc.currentPage(), MSTextLayer)
    
    // ------------------------------------
    // select layers by type
    var selectLayersOfType_inContainer = function(layerType, containerLayer) {
        
        // Filter layers using NSPredicate
        var scope = (typeof containerLayer !== 'undefined') ? [containerLayer children] : [[doc currentPage] children],
        predicate = NSPredicate.predicateWithFormat("(className == %@)", layerType),
        layers = [scope filteredArrayUsingPredicate:predicate];
        
        // Deselect current selection
        //[[doc currentPage] deselectAllLayers]
        
        // Loop through filtered layers and select them
        var loop = [layers objectEnumerator], layer;
        while (layer = [loop nextObject]) {
            [layer select:true byExpandingSelection:true]
        }
        log([layers count] + " " + layerType + "s selected")
    }
    selectLayersOfType_inContainer("MSTextLayer")
    var loopLayers= context.selection.objectEnumerator(), textLayer;
    while (textLayer = loopLayers.nextObject()) {
        textLayer.setNameIsFixed(0)
        //textLayer.setString
        log(textLayer)
    }
}





var localiseAndroid = function (context) {
    //future stuff...
}

