var platform = "iOS"

var onStartup = function(context) {
    log("Started up app store export plugin");
}

var onOpenDocument = function(context) {
    log("onOpenDocument");
}

var onSelectionChanged = function(context) {
    log("selection changed");
}

var selectLayersOfType_inContainer = function(doc, layerType, containerLayer) {
    
    // Filter layers using NSPredicate
    var scope = (typeof containerLayer !== 'undefined') ? [containerLayer children] : [[doc currentPage] children],
    predicate = NSPredicate.predicateWithFormat("(className == %@)", layerType),
    layers = [scope filteredArrayUsingPredicate:predicate];
    
    // Deselect current selection
    [doc currentPage].changeSelectionBySelectingLayers(nil);
    
    // Loop through filtered layers and select them
    var loop = [layers objectEnumerator], layer;
    while (layer = [loop nextObject]) {
        [layer select:true byExpandingSelection:true]
    }
    log([layers count] + " " + layerType + "s selected")
}

// find pages and layers
var findPagesNamed = function(pageName) {
    var predicate = NSPredicate.predicateWithFormat("name == %@", pageName)
    return findLayersMatchingPredicate_inContainer_filterByType(predicate, nil, MSPage)
}

var findLayersMatchingPredicate_inContainer_filterByType = function(predicate, container, layerType) {
    var scope;
    switch (layerType) {
        case MSPage :
            scope = doc.pages()
            return scope.filteredArrayUsingPredicate(predicate)
            break;
            
        case MSArtboardGroup :
            if(typeof container !== 'undefined' && container != nil) {
                if (container.className == "MSPage") {
                    scope = container.artboards()
                    return scope.filteredArrayUsingPredicate(predicate)
                }
            } else {
                // search all pages
                var filteredArray = NSArray.array()
                var loopPages = doc.pages().objectEnumerator(), page;
                while (page = loopPages.nextObject()) {
                    scope = page.artboards()
                    filteredArray = filteredArray.arrayByAddingObjectsFromArray(scope.filteredArrayUsingPredicate(predicate))
                }
                return filteredArray
            }
            break;
            
        default :
            if(typeof container !== 'undefined' && container != nil) {
                scope = container.children()
                return scope.filteredArrayUsingPredicate(predicate)
            } else {
                // search all pages
                var filteredArray = NSArray.array()
                var loopPages = doc.pages().objectEnumerator(), page;
                while (page = loopPages.nextObject()) {
                    scope = page.children()
                    filteredArray = filteredArray.arrayByAddingObjectsFromArray(scope.filteredArrayUsingPredicate(predicate))
                }
                return filteredArray
            }
    }
    return NSArray.array() // Return an empty array if no matches were found
}

var findFirstLayerMatchingPredicate_inContainer_filterByType = function(predicate, container, layerType) {
    var filteredArray = findLayersMatchingPredicate_inContainer_filterByType(predicate, container, layerType)
    return filteredArray.firstObject()
}

function localiseStringForKey(stringKey) {
    switch (platform) {
        case "iOS":
            return ""//return localizedStringForKey
        case "Android":
            return ""//return
        default:
            return ""
    }
}

function localiseTextLayersForPage(page) {
    // ------------------------------------
    //var predicate = NSPredicate.predicateWithFormat("name != %@", "")
    //var layers = findFirstLayerMatchingPredicate_inContainer_filterByType(predicate, doc.currentPage(), MSTextLayer)
    
    // ------------------------------------
    // select layers by type
    var selectLayersOfType_inContainer = function(layerType, containerLayer) {
        
        // Filter layers using NSPredicate
        var scope = (typeof containerLayer !== 'undefined') ? [containerLayer children] : [page children],
        predicate = NSPredicate.predicateWithFormat("(className == %@)", layerType),
        layers = [scope filteredArrayUsingPredicate:predicate];
        
        // Deselect current selection
        //[[doc currentPage] deselectAllLayers]
        
        // Loop through filtered layers and select them
        var loop = [layers objectEnumerator], layer;
        while (layer = [loop nextObject]) {
            [layer select:true byExpandingSelection:true]
        }
        log([layers count] + " " + layerType + "s selected")
    }
    selectLayersOfType_inContainer("MSTextLayer")
    var loopLayers= context.selection.objectEnumerator(), textLayer;
    while (textLayer = loopLayers.nextObject()) {
        textLayer.setNameIsFixed(0)
        //textLayer.setString(localiseStringForKey(textLayer.name))
        //something on localisation and plugins here: http://sketchplugins.com/d/170-localization/10
    }
}

function duplicatePage (doc, page, name) {
    // duplicate pages
    newPage = [page copy]
    newPage.setName(name)
    
    [[doc documentData] addPage:newPage]
    [doc setCurrentPage:newPage]
    var view = doc.currentView()
    [view setZoomValueCenteredInCanvas:0.25]
}


var localiseIOS = function (context) {
    platform = "iOS"
    var doc = context.document

    selectLayersOfType_inContainer(doc, "MSArtboardGroup")
    //for count in languages...
    //page = [doc currentPage]
    //duplicatePage(doc, page, "German")
    //localiseTextLayersForPage([doc currentPage])//select text layers and localize
    //[doc setCurrentPage:page] //back to base/english page
    log("js context: " + context);
    log("yes?..................")
}





var localiseAndroid = function (context) {
    platform = "Android"
    //future stuff...
}

